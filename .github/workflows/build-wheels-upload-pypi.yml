#
# GitHub action for building the distribution and wheels of the sep package
# and uploading them to the PyPI package index.
#
# v0.1, Michael Wuertenberger
#

name: Build_Wheels_Upload_PyPI

on:
  push:
    # Run this action on the trigger event when a tag is pushed
    tags:
       - '*'
    # Other setups if pushes in master only if setup changed or the workflow
    # itself. As the version number is generated automatically, this might
    # not make sense.

    # branches:
    #   - master
    # paths:
    #   - 'setup.py'
    #   - '.github/workflows/Build_Wheels_Upload_PyPI.yml'

jobs:

  # This action is split into three jobs:
  # - Building the distribution
  # - Building the wheels for the distribution
  # - Uploading the artifacts to PyPI package
  # The first and second job run in parallel.
  # The uploading jos needs to have the other two finished without error.

  build_sdist:

    # First the distribution is done on ubuntu. This is not related to any
    # operating system, so we could do it on the default os og GitHub.
    # Python 3.9 is chosen as it is the actual version your could work with.

    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install_python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # For the build, sep needs numpy and cython and I add twine and wheel
      # for better testing and checking.

      - name: install_dependencies
        run: python -m pip install twine numpy wheel cython

      - name: build_sdist
        run: python setup.py sdist

      - name: show_files
        run: ls -lh dist
        shell: bash

      - name: check_metadata
        run: twine check dist/*

      - name: upload_sdist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/*.tar.gz

  build_wheels:

    # Second the wheels are build for different OS and python versions. This is
    # done with the help of <cibuildwheel> package. Again, beside this package
    # numpy, cython is needed, adding certify and wheel for build.
    #
    # The wheels are build for Windows, Linux and MacOS and the python versions
    # 3.5 - 3.9
    # Please check if there are constraints of the manylinux configuration I
    # have chosen so far! This is related to the binary package you are
    # developing.
    # The three operating system could be done in parallel.

    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.9]
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Setup_Python_${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install_deps
        run: python -m pip install cibuildwheel wheel cython numpy certifi

      - name: build
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp3*"
          # CIBW_SKIP: "cp35-* cp36-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_BUILD_VERBOSITY: 1

      - name: show_files
        run: ls -lh wheelhouse
        shell: bash

      - name: upload_wheels
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: wheelhouse

  upload_to_pypi:

    # Finally we collect all out data from the artifacts and put them back to
    # dist directory for upload. The final step waits for the other jobs to be
    # finished and starts only if the trigger event of the action was a push
    # of a tag starting with <v> as version separation. All other jobs run
    # without heading <v>

    runs-on: [ubuntu-latest]
    needs: [build_wheels, build_sdist]

    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')

    steps:
    - uses: actions/setup-python@v2

    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist

    # Actually I only have the test version of PyPI running. The secret token
    # name I have chosen from my test repo is <PYPI_TEST>. This will not work
    # in your repo. Please take care of it.
    #
    # For the activation of the real index, please add a secret token from PyPI to
    # the GitHub repo, give it a name and replace in the password reference the
    # <pypi_password> with the name of the secret's name you have chosen for the
    # PyPI token.

    - name: upload_to_test_PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TEST }}
        skip_existing: true
        repository_url: https://test.pypi.org/legacy/

    # - name: upload_to_PyPI
    #   uses: pypa/gh-action-pypi-publish@v1.4.1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.pypi_password }}
    #     skip_existing: true
